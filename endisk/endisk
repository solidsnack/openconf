#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: endisk <dir> <disk>
        endisk <dir> <disk> // <dir> (--all|--top)?

  Joins together disks, formats them, sets up fstab to mount the device in the
  designated place and if a second directory is given it is mirrored into the
  new filesystem. An example:

    endisk tmp-space /tmp /dev/xvdb // /tmp --top

  The <label> should be a letter-digit-hyphen name, like in DNS, to avoid
  running afoul of the many odd restrictions prevalent in the filesystem
  tools. The <label> is used to place a comment in fstab and to create an LVM
  volume group if needed.

  Nonexistent devices are skipped. If none of the specified devices exist, it
  is not an error; the program emits a message to say nothing was done.

  The program places a comment in fstab that mirrors the command line used to
  create the disk set, with any devices that were skipped removed. For
  example, the fstab entry and comment for the above example might look like:

    # endisk tmp-space /tmp /dev/xvdb // /tmp --top
    /dev/xvdb /tmp  auto  defaults,nobootwait,noatime     0       2

  The comment serves two purposes: it allows endisk to skip configuring a disk
  when run a second time and it documents the way the device was created.

  When specifying a second directory, one can set whether to sync only the
  topmost directory component or to sync recursively. The latter is the
  default. The former is useful when initializing /tmp space or a log
  directory. This functionality is very limited and could in principle be
  extended with the full range of rsync options.

 TODO

  Expose LVM support.

USAGE
}; function --help { -h ;}

function main {
  local mountpoint="$1"; shift      ##  Where to mount the eventual disk.
  local disk=                       ##  The disk to eventually mount.
  local disks=()                    ##  Array of disk source args.
  local devs=()                     ##  Array of actual block devices.
  local template=()                 ##  Arguments to the template unpacker.
  while [[ ${1:-} ]]
  do case "$1" in
    //) shift ; [[ $# -le 0 ]] || template=( "$@" ) ; break ;;
    *)  disks=( "${disks[@]:+${disks[@]}}" "$1" ) ; shift ;;
  esac done
  for dev in "${disks[@]}"
  do
    if [[ -b "$dev" ]]
    then devs=( "${devs[@]:+${devs[@]}}" "$dev" )
    else [[ ! -e "$dev" ]] || err "Path $dev exists but is not a block device."
    fi
  done
  [[ ${#devs[@]} -gt 0 ]] || end "Skipping; none of the disks were found."
  if [[ ${#devs[@]} -gt 1 ]]
  then err "But one disk, please." #disk="$(merge_disks "$label" "${devs[@]}")"
  else disk="${devs[0]}"
  fi
  local spec=( "$mountpoint" "${devs[@]}" )
  [[ ${#template[@]} -le 0 ]] || spec=( "${spec[@]}" // "${template[@]}" )
  ext4 "$disk"
  fstab "$mountpoint" "$disk"
  [[ ${#template[@]} -le 0 ]] || template "${template[@]}"
}

function template {
  local mnt=/media/datadisk."$(date -u +%FT%TZ)".$$
  local rsync=( rsync -av "$1"/ "$mnt" ) ; shift
  case "${1:-}" in
    ""|--all) : ;; # Leave command as-is.
    --top)    rsync=( "${rsync[@]}" --exclude '/*' ) ;;
  esac
  trap "clear_mount $mnt" EXIT
  mkdir "$mnt"
  mount "$disk" "$mnt"
  "${rsync[@]}"
  clear_mount "$mnt"
}

function clear_mount {
  if cut -d' ' -f2 /proc/mounts | fgrep -xq -- "$1"
  then umount "$1" && rm -rf "$1"
  fi
}

# Label should be letter-digit-hyphen, like domain name components. Why? Well,
# probably LVM does not like certain characters in volume group names; and the
# fstab format is doubtless vulnerable to infelicities with regards to
# newlines and other characters.
function label_validate {
  [[ $1 =~ ^[a-z0-9A-Z]([a-z0-9A-Z-]*[a-z0-9A-Z])?$ ]]
}

function fstab {
  local mountpoint="$1"
  local device="$2"
  local fstab="${3:-/etc/fstab}"
  local ret=
  fgrep -qx -- "# $(fstab_label)" "$fstab" && ret=$? || ret=$?
  if [[ $ret -eq 1 ]]
  then write_fstab "$device" "$mountpoint" "$fstab"
  else return $ret # Pass success of fgrep or errors other than line not
  fi               # found up to the caller.
}

function write_fstab {
local f="${3:-/etc/fstab}"
cat >> "${3:-/etc/fstab}" <<EOF
# $(fstab_label)
$1	$2	auto	defaults,nobootwait,noatime	0	2
EOF
}

# Note well: the spec[] array is set in an enclosing scope.
function fstab_label {
  out "endisk ${spec[@]}"
}

# If the disk is already formatted as ext4, leave it as is; otherwise,
# reformat it.
function ext4 {
  local blkid=
  if blkid="$(blkid -o value -s TYPE "$1")"
  then [[ $blkid = ext4 ]] || mkfs.ext4 -m 0 "$1"
  fi
}

function merge_devs {
  local name="$1"; shift
  if vgs "$name" &>/dev/null # If the VG exists,
  then
    lvs "$name"/main &>/dev/null # the LV must exist.
  else
    lvm vgcreate "$name" "$@" 1>&2
    lvm lvcreate --name main --extents 80%VG "$name" >&2
  fi
  lvs --noheadings --options lv_path "$name"/main | sed 's/^ *//'
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function end { msg "$*" ; return 0 ;}
function out { printf '%s\n' "$*" ;}

if declare -F | cut -d' ' -f3 | fgrep -q -- "${1:-}"
then "$@"
else main "$@"
fi

