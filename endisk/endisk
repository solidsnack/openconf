#!/bin/bash
set -o errexit -o nounset -o pipefail
function -h {
cat <<USAGE
 USAGE: endisk <dir> <disk> (--(no-)?mount)?
        endisk <dir> <disk> (--(no-)?mount)? // <dir> (--all|--top)?

  Joins together disks, formats them, sets up fstab to mount the device in the
  designated place and if a second directory is given it is mirrored into the
  new filesystem. An example:

    endisk /tmp /dev/xvdb // /tmp --top

  Nonexistent devices are skipped. If none of the specified devices exist, it
  is not an error; the program emits a message to say nothing was done.

  With the --mount option, the disk will be mounted after all other steps have
  completed. Without it, or with --no-mount, the necessary entry will be
  created in /etc/fstab but the disk will not be mounted. If the filesystem is
  already mounted, the --mount option merely skips over it; but --no-mount
  does not unmount it. It is really an operational convenience, to make
  idempotent setup following disk setup easier, rather than a part of the
  filesystem specification.

  The program places a comment in fstab that mirrors the command line used to
  create the disk set, with any devices that were skipped removed. For
  example, the fstab entry and comment for the above example might look like:

    # endisk /tmp /dev/xvdb // /tmp --top
    /dev/xvdb /tmp  auto  defaults,nobootwait,noatime     0       2

  The comment serves two purposes: it allows endisk to skip configuring a disk
  when run a second time and it documents the way the device was created. The
  --mount option is not included in the comment.

  When specifying a second directory after //, one can set whether to sync
  only the topmost directory component (--top) or to sync recursively (--all).
  The latter is the default. The former is useful when initializing /tmp space
  or a log directory prior to a reboot. This functionality is very limited and
  could in principle be extended with the full range of rsync options. Note
  that this syncing occurs *only once*, when the filesystem is created.

 TODO

  Expose LVM support.

  Allow the file source after // to be an HTTP URL, pointing to a tarball.

USAGE
}; function --help { -h ;}

function main {
  local mount=false
  local mountpoint="$1"; shift      ##  Where to mount the eventual disk.
  local disk=                       ##  The disk to eventually mount.
  local disks=()                    ##  Array of disk source args.
  local devs=()                     ##  Array of actual block devices.
  local template=()                 ##  Arguments to the template unpacker.
  while [[ ${1:-} ]]
  do case "$1" in
    --mount) mount=true ; shift ;;
    //)      shift ; [[ $# -le 0 ]] || template=( "$@" ) ; break ;;
    *)       disks=( "${disks[@]:+${disks[@]}}" "$1" ) ; shift ;;
  esac done
  for dev in "${disks[@]}"
  do
    if [[ -b "$dev" ]]
    then devs=( "${devs[@]:+${devs[@]}}" "$dev" )
    else [[ ! -e "$dev" ]] || err "Path $dev exists but is not a block device."
    fi
  done
  [[ ${#devs[@]} -gt 0 ]] ||
    { msg "Skipping; none of the disks (${disks[@]}) were found." ; return 0 ;}
  if [[ ${#devs[@]} -gt 1 ]]
  then err "But one disk, please." #disk="$(lvm_disk "$label" "${devs[@]}")"
  else disk="${devs[0]}"
  fi
  local spec=( "$mountpoint" "${devs[@]}" )
  [[ ${#template[@]} -le 0 ]] || spec=( "${spec[@]}" // "${template[@]}" )
  check_fstab && ret=$? || ret=$?
  case "$ret" in
    0) : ;;
    1) ext4 "$disk"
       fstab "$mountpoint" "$disk"
       [[ ${#template[@]} -le 0 ]] || template "${template[@]}" ;;
    *) return $ret ;; # Pass success of fgrep or errors other than line not
  esac                # found up to the caller.
  ! $mount || idempotent_mount "$mountpoint"
}

function template {
  local mnt=/media/datadisk."$(date -u +%FT%TZ)".$$
  local rsync=( rsync -av "$1"/ "$mnt" ) ; shift
  case "${1:-}" in
    ""|--all) : ;; # Leave command as-is.
    --top)    rsync=( "${rsync[@]}" --exclude '/*' ) ;;
  esac
  trap "clear_mount $mnt" EXIT
  mkdir "$mnt"
  mount "$disk" "$mnt"
  "${rsync[@]}"
  clear_mount "$mnt"
  trap - EXIT
}

function clear_mount {
  if cut -d' ' -f2 /proc/mounts | fgrep -xq -- "$1"
  then umount "$1" && rm -rf "$1"
  fi
}

function idempotent_mount {
  if ! ( cut -d' ' -f2 /proc/mounts | fgrep -xq -- "$1" )
  then mkdir -p "$1" && mount "$1"
  fi
}

# Label should be letter-digit-hyphen, like domain name components. Why? Well,
# probably LVM does not like certain characters in volume group names; and the
# fstab format is doubtless vulnerable to infelicities with regards to
# newlines and other characters.
function label_validate {
  [[ $1 =~ ^[a-z0-9A-Z]([a-z0-9A-Z-]*[a-z0-9A-Z])?$ ]]
}

function check_fstab {
  fgrep -qx -- "# $(fstab_label)" "${1:-/etc/fstab}"
}

function fstab {
  local mountpoint="$1"
  local device="$2"
  local fstab="${3:-/etc/fstab}"
  local ret=
  check_fstab "$fstab" && ret=$? || ret=$?
  if [[ $ret -eq 1 ]]
  then write_fstab "$device" "$mountpoint" "$fstab"
  else return $ret # Pass success of fgrep or errors other than line not
  fi               # found up to the caller.
}

function write_fstab {
local f="${3:-/etc/fstab}"
cat >> "${3:-/etc/fstab}" <<EOF
# $(fstab_label)
$1	$2	auto	defaults,nobootwait,noatime	0	2
EOF
}

# Note well: the spec[] array is set in an enclosing scope.
function fstab_label {
  out "endisk ${spec[@]}"
}

# If the disk is already formatted as ext4, leave it as is; otherwise,
# reformat it.
function ext4 {
  local blkid=
  if blkid="$(blkid -o value -s TYPE "$1")"
  then [[ $blkid = ext4 ]] || mkfs.ext4 -m 0 "$1"
  else err "Not able to read blkid from $1"
  fi
}

function lvm_disk {
  which lvm &>/dev/null || err "Please install lvm2 to use the LVM feature."
  local name="$1"; shift
  if vgs "$name" &>/dev/null # If the VG exists,
  then
    lvs "$name"/main &>/dev/null # the LV must exist.
  else
    lvm vgcreate "$name" "$@" 1>&2
    lvm lvcreate --name main --extents 80%VG "$name" >&2
  fi
  lvs --noheadings --options lv_path "$name"/main | sed 's/^ *//'
}

function msg { out "$*" >&2 ;}
function err { local x=$? ; msg "$*" ; return $(( $x == 0 ? 1 : $x )) ;}
function out { printf '%s\n' "$*" ;}

if [[ ${1:-} ]] && declare -F | cut -d' ' -f3 | fgrep -qx -- "${1:-}"
then "$@"
else main "$@"
fi

